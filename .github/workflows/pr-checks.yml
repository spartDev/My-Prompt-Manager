name: 🔍 Pull Request Checks

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened, ready_for_review ]

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22.x'
  # Fail fast - stop immediately on any quality gate failure
  CI: true

jobs:
  # Job 1: Setup dependencies and cache for all subsequent jobs
  setup:
    name: 📦 Dependencies & Setup
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
      node-version: ${{ env.NODE_VERSION }}
    steps:
      - name: 🛎️ Checkout Repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          # Fetch full history for better caching and analysis
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Cache Dependencies
        id: cache-deps
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: 🔧 Install Dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Verify Installation
        run: |
          npm ls --depth=0
          node --version
          npm --version

  # Job 2: Linting with zero tolerance policy
  lint:
    name: 🧹 Code Quality & Linting
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.pull_request.draft == false
    steps:
      - name: 🛎️ Checkout Repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'npm'

      - name: 📦 Restore Dependencies
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: 🔧 Install Dependencies
        if: needs.setup.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: 📋 Cache ESLint Results
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: .eslintcache
          key: ${{ runner.os }}-eslint-${{ hashFiles('.eslintrc.*', 'eslint.config.*', 'src/**/*.{ts,tsx}') }}

      - name: 🧹 Run ESLint (MANDATORY - ZERO TOLERANCE)
        run: |
          echo "🚨 MANDATORY: Running ESLint with zero tolerance policy"
          echo "❌ Any linting errors will fail this check - NO EXCEPTIONS"
          npm run lint
        env:
          # Ensure ESLint failures cause workflow failure
          NODE_ENV: test

      - name: 📊 ESLint Report
        if: always()
        run: |
          echo "📋 ESLint Summary:"
          npx eslint . --format=compact --max-warnings=0 || echo "⚠️ Linting issues found above"

  # Job 3: Comprehensive testing with coverage
  test:
    name: 🧪 Test Suite & Coverage
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        node-version: ['22.x', '24.x']
      fail-fast: true # Stop immediately on first failure
    steps:
      - name: 🛎️ Checkout Repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Restore Dependencies
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: 🔧 Install Dependencies
        if: needs.setup.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: 🧪 Run Test Suite (MANDATORY - ALL MUST PASS)
        run: |
          echo "🚨 MANDATORY: Running full test suite"
          echo "❌ Any test failures will fail this check - NO EXCEPTIONS"
          npm test
        env:
          NODE_ENV: test
          CI: true

      - name: 📊 Generate Coverage Report
        if: matrix.node-version == '22.x'
        run: npm run test:coverage

      - name: 📈 Upload Coverage Reports
        if: matrix.node-version == '22.x'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7

      - name: 📋 Coverage Summary
        if: matrix.node-version == '22.x'
        run: |
          echo "📊 Test Coverage Summary:"
          if [ -f coverage/coverage-summary.json ]; then
            cat coverage/coverage-summary.json
          fi

  # Job 4: Build verification for both dev and production
  build:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    needs: [setup, lint, test]
    if: github.event.pull_request.draft == false
    steps:
      - name: 🛎️ Checkout Repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'npm'

      - name: 📦 Restore Dependencies
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: 🔧 Install Dependencies
        if: needs.setup.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: 📋 Cache Build Assets
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: |
            dist
            .vite
          key: ${{ runner.os }}-build-${{ hashFiles('src/**/*', 'public/**/*', 'manifest.json') }}

      - name: 🏗️ Production Build
        run: |
          echo "🏗️ Building Chrome extension for production..."
          npm run build
        env:
          NODE_ENV: production

      - name: 🔍 Verify Build Output
        run: |
          echo "🔍 Verifying build artifacts..."
          ls -la dist/
          if [ ! -f "dist/manifest.json" ]; then
            echo "❌ Missing manifest.json in build output"
            exit 1
          fi
          echo "✅ Build verification passed"

      - name: 📦 Chrome Extension Packaging
        run: |
          echo "📦 Testing Chrome extension packaging..."
          npm run package

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: chrome-extension-build
          path: |
            dist/
            *.zip
          retention-days: 7

      - name: 📊 Build Size Analysis
        run: |
          echo "📊 Build Size Analysis:"
          du -sh dist/
          find dist/ -name "*.js" -exec wc -c {} + | sort -n
          echo "📦 Extension package size:"
          ls -lh *.zip 2>/dev/null || echo "No zip files found"

  # Job 5: End-to-end regression suite with Playwright
  e2e:
    name: 🎯 End-to-End Tests
    runs-on: ubuntu-latest
    needs: [setup, test]
    if: github.event.pull_request.draft == false
    steps:
      - name: 🛎️ Checkout Repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'npm'

      - name: 📦 Restore Dependencies
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: 🔧 Install Dependencies
        if: needs.setup.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: 📥 Cache Playwright Browsers
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}

      - name: 🎯 Install Playwright Chromium
        run: npx playwright install --with-deps chromium

      - name: Sanity-check Playwright
        run: |
          npx playwright --version
          npm ls @playwright/test

      - name: 🧪 Run Playwright E2E Suite
        run: npm run test:e2e -- --reporter=line
        env:
          PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright

      - name: 📤 Upload Playwright Report (on failure)
        if: failure()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  # Job 6: Security and dependency scanning
  security:
    name: 🔒 Security & Dependencies
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.pull_request.draft == false
    steps:
      - name: 🛎️ Checkout Repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'npm'

      - name: 📦 Restore Dependencies
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: 🔧 Install Dependencies
        if: needs.setup.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: 🔒 Security Audit
        run: |
          echo "🔒 Running npm security audit..."
          npm audit --audit-level=moderate
        continue-on-error: false # Fail on security vulnerabilities

      - name: 🔍 Dependency Review
        uses: actions/dependency-review-action@595b5aeba73380359d98a5e087f648dbb0edce1b # v4
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

      - name: 📋 Chrome Extension Manifest Validation
        run: |
          echo "📋 Validating Chrome extension manifest..."
          if [ ! -f "manifest.json" ]; then
            echo "❌ Missing manifest.json"
            exit 1
          fi
          
          # Check for Manifest V3 compliance
          if ! grep -q '"manifest_version": 3' manifest.json; then
            echo "⚠️ Warning: Not using Manifest V3"
          else
            echo "✅ Using Manifest V3"
          fi
          
          # Validate required fields
          required_fields=("name" "version" "description" "permissions")
          for field in "${required_fields[@]}"; do
            if ! grep -q "\"$field\"" manifest.json; then
              echo "❌ Missing required field: $field"
              exit 1
            fi
          done
          
          echo "✅ Manifest validation passed"

  # Job 7: Final quality gate summary
  quality-gate:
    name: ✅ Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [setup, lint, test, build, e2e, security]
    # Run even if jobs are cancelled or fail, but not for draft PRs
    if: always() && github.event.pull_request.draft == false
    steps:
      - name: 📋 Quality Gate Results
        run: |
          echo "📋 Quality Gate Summary for PR #${{ github.event.pull_request.number }}"
          echo "=================================="
          
          # Check each job status
          setup_status="${{ needs.setup.result }}"
          lint_status="${{ needs.lint.result }}"
          test_status="${{ needs.test.result }}"
          build_status="${{ needs.build.result }}"
          e2e_status="${{ needs.e2e.result }}"
          security_status="${{ needs.security.result }}"
          
          echo "📦 Dependencies & Setup: $setup_status"
          echo "🧹 Code Quality & Linting: $lint_status"
          echo "🧪 Test Suite & Coverage: $test_status"
          echo "🏗️ Build Verification: $build_status"
          echo "🎯 End-to-End Tests: $e2e_status"
          echo "🔒 Security & Dependencies: $security_status"
          
          # Check if workflow was cancelled (new commit pushed)
          if [[ "$setup_status" == "cancelled" || "$lint_status" == "cancelled" || "$test_status" == "cancelled" || "$build_status" == "cancelled" || "$e2e_status" == "cancelled" || "$security_status" == "cancelled" ]]; then
            echo ""
            echo "⚠️ WORKFLOW CANCELLED"
            echo "A new commit was pushed, cancelling this workflow run."
            echo "The latest commit will be checked in a new workflow run."
            # Don't fail on cancelled - it's expected behavior
            exit 0
          # Check if all succeeded
          elif [[ "$setup_status" == "success" && "$lint_status" == "success" && "$test_status" == "success" && "$build_status" == "success" && "$e2e_status" == "success" && "$security_status" == "success" ]]; then
            echo ""
            echo "🎉 ✅ ALL QUALITY GATES PASSED!"
            echo "🚀 This PR meets all mandatory requirements and is ready for review."
            exit 0
          else
            echo ""
            echo "❌ 🚨 QUALITY GATES FAILED!"
            echo "🛑 This PR does not meet the mandatory requirements."
            echo "📋 Please fix all issues before requesting review."
            exit 1
          fi

      - name: 📊 Add PR Comment with Results
        if: always()
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6
        with:
          script: |
            const results = {
              setup: "${{ needs.setup.result }}",
              lint: "${{ needs.lint.result }}",
              test: "${{ needs.test.result }}",
              build: "${{ needs.build.result }}",
              e2e: "${{ needs.e2e.result }}",
              security: "${{ needs.security.result }}"
            };
            
            // Check workflow status
            const anyCancelled = Object.values(results).some(result => result === 'cancelled');
            const allPassed = Object.values(results).every(result => result === 'success');
            const allSkipped = Object.values(results).every(result => result === 'skipped');
            
            // Skip comment for cancelled workflows - they're superseded by new commits
            if (anyCancelled) {
              console.log('Workflow cancelled - skipping comment to reduce noise');
              return;
            }
            
            // Skip comment for fully skipped workflows (e.g., draft PRs)
            if (allSkipped) {
              console.log('All checks skipped - no comment needed');
              return;
            }
            
            // Determine status for meaningful results only
            let status, emoji, message;
            
            if (allPassed) {
              status = '✅ PASSED';
              emoji = '🎉';
              message = '🚀 **All mandatory quality requirements have been met!** This PR is ready for review.';
            } else {
              status = '❌ FAILED';
              emoji = '🚨';
              message = '🛑 **Quality gates failed.** Please address all issues before requesting review.';
            }
            
            // Helper function to get status icon
            const getStatusIcon = (result) => {
              switch(result) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⚠️';
                case 'skipped': return '⏭️';
                default: return '❓';
              }
            };
            
            // Find and delete previous bot comments to keep PR clean
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComments = comments.filter(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Quality Gate Results')
            );
            
            // Delete old quality gate comments (keep only the latest)
            for (const comment of botComments) {
              try {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: comment.id
                });
                console.log(`Deleted old quality gate comment ${comment.id}`);
              } catch (error) {
                console.log(`Could not delete comment ${comment.id}: ${error.message}`);
              }
            }
            
            // Create the new comment with meaningful results
            const comment = `## ${emoji} Quality Gate Results ${status}
            
            **Commit:** \`${context.sha.substring(0, 7)}\` | **Run:** [#${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            
            | Check | Status |
            |-------|---------|
            | 📦 Dependencies & Setup | ${getStatusIcon(results.setup)} ${results.setup} |
            | 🧹 Code Quality & Linting | ${getStatusIcon(results.lint)} ${results.lint} |
            | 🧪 Test Suite & Coverage | ${getStatusIcon(results.test)} ${results.test} |
            | 🏗️ Build Verification | ${getStatusIcon(results.build)} ${results.build} |
            | 🎯 End-to-End Tests | ${getStatusIcon(results.e2e)} ${results.e2e} |
            | 🔒 Security & Dependencies | ${getStatusIcon(results.security)} ${results.security} |
            
            ${message}
            
            ---
            
            ### 📋 Mandatory Requirements:
            - ✅ **Zero tolerance** for linting errors (\`npm run lint\`)
            - ✅ **All tests must pass** (\`npm test\`)
            - ✅ **Build must succeed** for Chrome extension
            - ✅ **Playwright end-to-end suite** must pass (`npm run test:e2e`)
            - ✅ **No security vulnerabilities** above moderate level
            - ✅ **Manifest V3 compliance** for Chrome extension
            
            <sub>💡 This comment updates automatically with each workflow run. Previous results are replaced to keep the PR clean.</sub>
            `;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
